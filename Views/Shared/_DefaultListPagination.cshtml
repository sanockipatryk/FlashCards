@model PaginationViewModel

@{
	var queryString = Context.Request.QueryString;
}

<nav aria-label="Pagination">
	@{
		if (Model.NumberOfPages >= 1)
		{
			<ul class="pagination d-flex justify-content-center align-items-end">
				@if (Model.CurrentPage != 1)
				{
					<li class="page-item">
						<a class="page-link text-light bg-primary" href="@(1)@queryString" aria-label="First">
							<span aria-hidden="true">&laquo;</span>
						</a>
					</li>
					<li class="page-item">
						<a class="page-link text-light bg-primary" href="@(Model.CurrentPage - 1)@queryString"
					aria-label="Previous">
							<span aria-hidden="true">&lsaquo;</span>
						</a>
					</li>
				}
				@for (int i = (Model.CurrentPage >= 4 ? Model.CurrentPage - 2 : 1); i <= Model.NumberOfPages && i <=
					(Model.CurrentPage + 2); i++)
				{
					if (Model.CurrentPage == i)
					{
						<li class="page-item active"><a class="page-link disabled-link text-dark bg-info" href="@(i)@queryString">@i</a>
						</li>
					}
					else
					{
						<li class="page-item"><a class="page-link text-light bg-primary" href="@(i)@queryString">@i</a></li>
					}
				}
				@if (Model.CurrentPage != Model.NumberOfPages)
				{
					<li class="page-item">
						<a class="page-link text-light bg-primary" href="@(Model.CurrentPage + 1)@queryString" aria-label="Next">
							<span aria-hidden="true">&rsaquo;</span>
						</a>
					</li>
					<li class="page-item">
						<a class="page-link text-light bg-primary" href="@(Model.NumberOfPages)@queryString" aria-label="Last">
							<span aria-hidden="true">&raquo;</span>
						</a>
					</li>
				}
			</ul>
		}
	}
</nav>