@model CardSetReport
@using FlashCards.Helpers
@using FlashCards.Models.Types.Enums

<div class="row mx-3">
    <div class="col-12 col-md-8 offset-md-2 px-0">
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item" aria-current="page">
                    <a class="text-info" asp-action="Index" asp-route-page="1">
                        Reports
                    </a>
                </li>
                <li class="breadcrumb-item active text-light" aria-current="page">Report</li>
            </ol>
        </nav>
    </div>
    <div class="col-12 col-md-8 offset-md-2 px-0 mb-3 bg-primary rounded-2">
        <div class="row m-0 px-0 py-2">
            <div class="col-12 mb-3">
                <div class="row m-0 p-0">
                    <div class="col-12 col-sm-4 text-center text-sm-start px-1 mt-3 mt-sm-0 order-1 order-sm-1">
                        <p class="text-secondary mb-1">Date reported</p>
                        <p class="text-light h5 mb-0"><strong>@Model.DateReported</strong></p>
                    </div>
                    <div class="col-12 col-sm-4 text-center px-1 order-0 order-sm-2">
                        <p class="text-secondary mb-1">Report cause: </p>
                        <p class="text-light h5 mb-0">
                            <strong>@EnumExtensionMethods.GetDisplayName(Model.ReportCause)</strong>
                        </p>
                    </div>
                    <div class="col-12 col-sm-4 px-1 mt-3 mt-sm-0 order-3 order-sm-3 text-center text-sm-end">
                        <p class="text-secondary mb-1">Date evaluated</p>
                        @if (Model.IsEvaluated)
                        {
                            <p class="text-info h5 mb-0"><strong>@Model.DateEvaluated</strong></p>
                        }
                        else
                        {
                            <p class="text-warning h5 mb-0">Waiting for evaluation</p>
                        }
                    </div>
                    <div class="col-12 col-sm-4 text-center text-sm-start px-1 mt-3 mt-sm-3 order-2 order-sm-4">
                        <p class="text-secondary mb-1">Reported by</p>
                        <p class="text-light h5 mb-0"><strong>@Model.User.Nickname</strong></p>
                    </div>
                    @if (Model.IsEvaluated)
                    {
                        <div
                        class="col-12 col-sm-4 offset-0 offset-sm-4 text-center text-sm-end px-1 mt-3 mt-sm-3 order-4 order-sm-5">
                            <p class="text-secondary mb-1">Evaluated by</p>
                            <p class="text-info h5 mb-0"><strong>@Model.EvaluatedBy.Nickname</strong></p>
                        </div>
                    }
                </div>
            </div>
            @if (Model.Description != null)
            {
                <div class="col-12">
                    <div class="row m-0 p-0">
                        <p class="text-secondary px-1 mb-1">User description for report</p>
                        <p class="text-light px-1">@Model.Description</p>
                    </div>
                </div>
            }
            <div class="col-12 mb-3">
                <div class="row mx-1 p-0">

                    @if (Model.IsEvaluated && Model.ReportResponse == ReportResponse.DeleteSet)
                    {
                        <a class="btn btn-secondary disabled" asp-controller="Cards" asp-action="Set"
                        asp-route-id="@Model.CardSetId" asp-route-report="@Model.Id">Set was deleted</a>
                    }
                    else if (Model.CardSet.IsDeleted)
                    {
                        <a class="btn btn-secondary disabled" asp-controller="Cards" asp-action="Set"
                        asp-route-id="@Model.CardSetId" asp-route-report="@Model.Id">Set no longer exists</a>
                    }
                    else
                    {
                        <a class="btn btn-secondary" asp-controller="Cards" asp-action="Set" asp-route-id="@Model.CardSetId"
                        asp-route-report="@Model.Id">Visit reported set</a>
                    }
                </div>
            </div>
            <div class="col-12">
                <p class="@(Model.IsEvaluated ? "text-info" : "text-light") text-center h4">
                    @(Model.IsEvaluated ? "Report evaluated" : "Evaluate report")
                </p>
                <p class="text-secondary text-center">
                    @(Model.IsEvaluated ? "See results of evaluation below." :
                    "Perform an action on set and notify the set owner with provided message.")

                </p>
                <form id="evaluationForm" method="post" asp-action="EvaluateReport" class="bg-main p-3 rounded-2">
                    <input type="hidden" asp-for="Id" />
                    <input type="hidden" asp-for="Description" />
                    <input type="hidden" asp-for="DateReported" />
                    <input type="hidden" asp-for="ReportCause" />
                    <input type="hidden" asp-for="UserId" />
                    <input type="hidden" asp-for="CardSetId" />
                    <input type="hidden" asp-for="CardSet.IsDeleted" />
                    <div class="col-12 form-floating">
                        <select id="responseSelect" class="form-select"
                            asp-items="@Html.GetEnumSelectList<ReportResponse>()" asp-for="ReportResponse"></select>
                        <label class="text-light" for="responseSelect">Perform action</label>
                    </div>
                    <div class="col-12 form-floating">
                        <textarea id="reasoningInput" class="form-control resize-off floating-textarea mt-2" type="text"
                            asp-for="EvaluationReasoning"></textarea>
                        <label class="text-light" for="reasoningInput">Explanation of evaluation</label>
                        <span asp-validation-for="EvaluationReasoning" class="text-danger"></span>
                    </div>
                    <div class="col-12 form-floating">
                        <textarea disabled id="messageInput" class="form-control resize-off floating-textarea mt-2"
                            type="text" asp-for="MessageToReportedSetOwner"></textarea>
                        <label class="text-light" for="messageInput">Explanation to reported user</label>
                        <span asp-validation-for="MessageToReportedSetOwner" class="text-danger"></span>
                    </div>
                    @if (!Model.IsEvaluated)
                    {
                        <div class="mt-2 p-0 text-center">
                            <button id="buttonEvaluate" class="btn btn-secondary mt-2" type="button">Evaluate</button>
                        </div>
                        <section id="submitButtonsSection" class="mt-2 p-0 text-center d-none">
                            <p class="text-info my-3">Are you sure you want to submit?</p>
                            <button id="cancelSubmitButton" class="btn btn-secondary mt-2" type="button">Cancel</button>
                            <button class="btn btn-info mt-2" type="submit">Submit</button>
                        </section>
                    }
                </form>
            </div>
        </div>
    </div>
</div>
@section Scripts {
<script>
    var evaluationForm = document.querySelector("#evaluationForm");
    var buttonEvaluate = document.querySelector("#buttonEvaluate");
    var submitButtonsSection = document.querySelector('#submitButtonsSection');
    var cancelSubmitButton = document.querySelector('#cancelSubmitButton');
    var messageToUserTextArea = document.querySelector("#messageInput");
    var responseSelect = document.querySelector("#responseSelect");

    var reportEvaluated = @Model.IsEvaluated.ToString().ToLower();
    if (reportEvaluated) {
        var formElements = evaluationForm.querySelectorAll("textarea, input, select");
        formElements.forEach(e => e.setAttribute("disabled", true));

        evaluationForm.addEventListener('submit', (e) => {
            e.preventDefault();
        })

    }
    else {
        messageToUserTextArea.setAttribute('disabled', true);
    }

    responseSelect.addEventListener('change', (e) => {
        if (e.target.value !== "@((int)ReportResponse.NoAction)") {
            console.log(e.target.value)
            if (messageToUserTextArea.hasAttribute('disabled'))
                messageToUserTextArea.removeAttribute('disabled');
        }
        else {
            console.log(e.target.value)
            if (!messageToUserTextArea.hasAttribute('disabled'))
                messageToUserTextArea.setAttribute('disabled', true);
        }
    })

    buttonEvaluate.addEventListener('click', () => {
        if (submitButtonsSection.classList.contains('d-none'))
            submitButtonsSection.classList.replace('d-none', 'd-block')
    })

    cancelSubmitButton.addEventListener('click', () => {
        if (submitButtonsSection.classList.contains('d-block'))
            submitButtonsSection.classList.replace('d-block', 'd-none')
    })

</script>
}